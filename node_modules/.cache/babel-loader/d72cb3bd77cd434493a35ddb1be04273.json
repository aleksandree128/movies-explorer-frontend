{"ast":null,"code":"class MainApi {\n  constructor(_ref) {\n    let {\n      baseUrl\n    } = _ref;\n    this._baseUrl = baseUrl;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n  registration(_ref2) {\n    let {\n      name,\n      email,\n      password\n    } = _ref2;\n    return fetch(`${this._baseUrl}/signup`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    }).then(res => this._checkResponse(res));\n  }\n\n  login(_ref3) {\n    let {\n      password,\n      email\n    } = _ref3;\n    return fetch(`${this._baseUrl}/signin`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        password: password,\n        email: email\n      })\n    }).then(res => this._checkResponse(res));\n  }\n\n  getUserData(jwt) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"GET\",\n      headers: {\n        authorization: `Bearer ${localStorage.getItem('jwt')}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => this._checkResponse(res));\n  }\n\n  updateUser(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        authorization: `Bearer ${localStorage.getItem('jwt')}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: data.name,\n        email: data.email\n      })\n    }).then(this._checkResponse);\n  }\n\n  getMovies() {\n    return fetch(`${this._baseUrl}/movies`, {\n      method: \"GET\",\n      headers: {\n        authorization: `Bearer ${localStorage.getItem('jwt')}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => this._checkResponse(res));\n  }\n\n  addMovie(movies) {\n    console.log(movies);\n    return fetch(`${this._baseUrl}/movies`, {\n      method: \"POST\",\n      headers: {\n        authorization: `Bearer ${localStorage.getItem('jwt')}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        country: movies.country,\n        director: movies.director,\n        duration: movies.duration,\n        year: movies.year,\n        description: movies.description,\n        image: 'https://api.nomoreparties.co' + movies.image.url,\n        trailerLink: movies.trailerLink,\n        thumbnail: 'https://api.nomoreparties.co' + movies.thumbnail,\n        movieId: movies.id,\n        nameRU: movies.nameRU,\n        nameEN: movies.nameEN\n      })\n    }).then(this._checkResponse);\n  }\n\n  deleteMovie(movieId) {\n    return fetch(`${this._baseUrl}/movies/${movieId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: `Bearer ${localStorage.getItem('jwt')}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(this._checkResponse);\n  }\n\n}\n\nexport const mainApi = new MainApi({\n  baseUrl: \"https://api.maria.diploma.nomoredomains.xyz\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n  }\n}); //https://api.maria.diploma.nomoredomains.xyz\n//https://api.korshinov.diplom.nomoredomains.sbs","map":{"version":3,"names":["MainApi","constructor","baseUrl","_baseUrl","_checkResponse","res","ok","json","Promise","reject","status","registration","name","email","password","fetch","method","headers","body","JSON","stringify","then","login","getUserData","jwt","authorization","localStorage","getItem","updateUser","data","getMovies","addMovie","movies","console","log","country","director","duration","year","description","image","url","trailerLink","thumbnail","movieId","id","nameRU","nameEN","deleteMovie","mainApi"],"sources":["C:/Users/aleks/dev/movies-explorer-frontend/src/utils/MainApi.js"],"sourcesContent":["class MainApi {\r\n    constructor({ baseUrl }) {\r\n        this._baseUrl = baseUrl;\r\n    }\r\n\r\n    _checkResponse(res) {\r\n        if (res.ok) {\r\n            return res.json();\r\n        } else {\r\n            return Promise.reject(`Ошибка: ${res.status}`);\r\n        }\r\n    }\r\n\r\n    registration({ name, email, password }) {\r\n        return fetch(`${this._baseUrl}/signup`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ name, email, password }),\r\n        }).then((res) => this._checkResponse(res));\r\n    }\r\n\r\n    login({ password, email }) {\r\n        return fetch(`${this._baseUrl}/signin`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n                password: password,\r\n                email: email,\r\n            }),\r\n        }).then((res) => this._checkResponse(res));\r\n    }\r\n\r\n    getUserData(jwt) {\r\n        return fetch(`${this._baseUrl}/users/me`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                authorization: `Bearer ${localStorage.getItem('jwt')}`,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        }).then((res) => this._checkResponse(res));\r\n    }\r\n\r\n    updateUser(data) {\r\n        return fetch(`${this._baseUrl}/users/me`, {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                authorization: `Bearer ${localStorage.getItem('jwt')}`,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                name: data.name,\r\n                email: data.email,\r\n            }),\r\n        }).then(this._checkResponse);\r\n    }\r\n\r\n    getMovies(){\r\n        return fetch(`${this._baseUrl}/movies`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                authorization: `Bearer ${localStorage.getItem('jwt')}`,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        }).then((res) => this._checkResponse(res));\r\n    }\r\n\r\n    addMovie(movies){\r\n        console.log(movies)\r\n        return fetch(`${this._baseUrl}/movies`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                authorization: `Bearer ${localStorage.getItem('jwt')}`,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                country: movies.country,\r\n                director: movies.director,\r\n                duration: movies.duration,\r\n                year: movies.year,\r\n                description: movies.description,\r\n                image: 'https://api.nomoreparties.co' + movies.image.url,\r\n                trailerLink: movies.trailerLink,\r\n                thumbnail: 'https://api.nomoreparties.co' + movies.thumbnail,\r\n                movieId: movies.id,\r\n                nameRU: movies.nameRU,\r\n                nameEN: movies.nameEN,\r\n            }),\r\n        }).then(this._checkResponse);\r\n    }\r\n\r\n    deleteMovie(movieId){\r\n        return fetch(`${this._baseUrl}/movies/${movieId}`, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                authorization: `Bearer ${localStorage.getItem('jwt')}`,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        }).then(this._checkResponse);\r\n    }\r\n}\r\n\r\nexport const mainApi = new MainApi({\r\n    baseUrl: \"https://api.maria.diploma.nomoredomains.xyz\",\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n    },\r\n});\r\n//https://api.maria.diploma.nomoredomains.xyz\r\n//https://api.korshinov.diplom.nomoredomains.sbs\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}